{"ast":null,"code":"var _jsxFileName = \"/mnt/network_repo/test_ai_rpg/RPGer/client/src/components/widgets/TextWidget.tsx\",\n  _s = $RefreshSig$();\n/**\n * TextWidget Component\n * \n * Widget for displaying formatted text content.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useTheme } from '../../context/ThemeContext';\nimport { WidgetCategory } from '../../types/widget';\nimport withWidget from './withWidget';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TextContainer = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  font-family: var(--font-family);\n`;\n_c = TextContainer;\nconst TextContent = styled.div`\n  font-size: ${props => props.fontSize};\n  text-align: ${props => props.textAlign};\n  font-weight: ${props => props.fontWeight};\n  line-height: 1.5;\n  white-space: pre-wrap;\n`;\n_c2 = TextContent;\nconst EditableTextarea = styled.textarea`\n  width: 100%;\n  height: 100%;\n  min-height: 100px;\n  resize: none;\n  border: 1px solid var(--${props => props.theme}-border);\n  background-color: var(--${props => props.theme}-surface);\n  color: var(--${props => props.theme}-text-primary);\n  font-family: var(--font-family);\n  padding: var(--spacing-sm);\n  border-radius: var(--border-radius-sm);\n  \n  &:focus {\n    outline: none;\n    border-color: var(--${props => props.theme}-primary);\n  }\n`;\n_c3 = EditableTextarea;\nconst ControlsContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: var(--spacing-sm);\n`;\n_c4 = ControlsContainer;\nconst Button = styled.button`\n  background-color: var(--${props => props.theme}-primary);\n  color: ${props => props.theme === 'dark' ? 'black' : 'white'};\n  border: none;\n  padding: var(--spacing-xs) var(--spacing-sm);\n  border-radius: var(--border-radius-sm);\n  cursor: pointer;\n  font-size: var(--font-size-sm);\n  \n  &:hover {\n    background-color: var(--${props => props.theme}-primary-variant);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n_c5 = Button;\nconst SaveStatus = styled.div`\n  font-size: var(--font-size-xs);\n  color: ${props => props.saved ? 'var(--success)' : 'var(--warning)'};\n`;\n_c6 = SaveStatus;\nconst defaultConfig = {\n  content: 'Enter your text here...',\n  fontSize: 'var(--font-size-md)',\n  textAlign: 'left',\n  fontWeight: 'normal'\n};\nconst TextWidget = ({\n  id,\n  config,\n  onConfigChange,\n  isEditing\n}) => {\n  _s();\n  const {\n    theme\n  } = useTheme();\n  const widgetConfig = {\n    ...defaultConfig,\n    ...config\n  };\n  const [text, setText] = useState(widgetConfig.content);\n  const [isEditable, setIsEditable] = useState(!!isEditing);\n  const [isSaved, setIsSaved] = useState(true);\n\n  // Update text when config changes\n  useEffect(() => {\n    if (widgetConfig.content !== text) {\n      setText(widgetConfig.content);\n    }\n  }, [widgetConfig.content]);\n\n  // Check if text has changed\n  useEffect(() => {\n    setIsSaved(text === widgetConfig.content);\n  }, [text, widgetConfig.content]);\n  const handleTextChange = e => {\n    setText(e.target.value);\n  };\n  const handleSave = () => {\n    if (onConfigChange) {\n      onConfigChange({\n        ...widgetConfig,\n        content: text,\n        lastSaved: new Date().toLocaleTimeString()\n      });\n    }\n    setIsSaved(true);\n  };\n  const toggleEdit = () => {\n    setIsEditable(!isEditable);\n\n    // Save when exiting edit mode\n    if (isEditable && !isSaved) {\n      handleSave();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TextContainer, {\n    children: isEditable ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ControlsContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: toggleEdit,\n          theme: theme,\n          children: \"Done Editing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SaveStatus, {\n          saved: isSaved,\n          children: isSaved ? widgetConfig.lastSaved ? `Last saved at ${widgetConfig.lastSaved}` : 'All changes saved' : 'Unsaved changes'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleSave,\n          disabled: isSaved,\n          theme: theme,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(EditableTextarea, {\n        value: text,\n        onChange: handleTextChange,\n        theme: theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ControlsContainer, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: toggleEdit,\n          theme: theme,\n          children: \"Edit Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextContent, {\n        fontSize: widgetConfig.fontSize,\n        textAlign: widgetConfig.textAlign,\n        fontWeight: widgetConfig.fontWeight,\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n_s(TextWidget, \"REFsUJn4M3eCtzACno+s09hT5sA=\", false, function () {\n  return [useTheme];\n});\n_c7 = TextWidget;\nexport default _c8 = withWidget(TextWidget, {\n  metadata: {\n    name: 'Text',\n    description: 'Display formatted text content',\n    category: WidgetCategory.UTILITY,\n    icon: 'üìù',\n    defaultSize: {\n      w: 6,\n      h: 2\n    },\n    minW: 2,\n    minH: 1\n  },\n  defaultConfig\n});\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"TextContainer\");\n$RefreshReg$(_c2, \"TextContent\");\n$RefreshReg$(_c3, \"EditableTextarea\");\n$RefreshReg$(_c4, \"ControlsContainer\");\n$RefreshReg$(_c5, \"Button\");\n$RefreshReg$(_c6, \"SaveStatus\");\n$RefreshReg$(_c7, \"TextWidget\");\n$RefreshReg$(_c8, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","styled","useTheme","WidgetCategory","withWidget","jsxDEV","_jsxDEV","Fragment","_Fragment","TextContainer","div","_c","TextContent","props","fontSize","textAlign","fontWeight","_c2","EditableTextarea","textarea","theme","_c3","ControlsContainer","_c4","Button","button","_c5","SaveStatus","saved","_c6","defaultConfig","content","TextWidget","id","config","onConfigChange","isEditing","_s","widgetConfig","text","setText","isEditable","setIsEditable","isSaved","setIsSaved","handleTextChange","e","target","value","handleSave","lastSaved","Date","toLocaleTimeString","toggleEdit","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","disabled","onChange","_c7","_c8","metadata","name","description","category","UTILITY","icon","defaultSize","w","h","minW","minH","$RefreshReg$"],"sources":["/mnt/network_repo/test_ai_rpg/RPGer/client/src/components/widgets/TextWidget.tsx"],"sourcesContent":["/**\n * TextWidget Component\n * \n * Widget for displaying formatted text content.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useTheme } from '../../context/ThemeContext';\nimport { WidgetProps, WidgetCategory } from '../../types/widget';\nimport withWidget from './withWidget';\n\nconst TextContainer = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  font-family: var(--font-family);\n`;\n\nconst TextContent = styled.div<{ fontSize: string; textAlign: string; fontWeight: string }>`\n  font-size: ${props => props.fontSize};\n  text-align: ${props => props.textAlign};\n  font-weight: ${props => props.fontWeight};\n  line-height: 1.5;\n  white-space: pre-wrap;\n`;\n\nconst EditableTextarea = styled.textarea`\n  width: 100%;\n  height: 100%;\n  min-height: 100px;\n  resize: none;\n  border: 1px solid var(--${props => props.theme}-border);\n  background-color: var(--${props => props.theme}-surface);\n  color: var(--${props => props.theme}-text-primary);\n  font-family: var(--font-family);\n  padding: var(--spacing-sm);\n  border-radius: var(--border-radius-sm);\n  \n  &:focus {\n    outline: none;\n    border-color: var(--${props => props.theme}-primary);\n  }\n`;\n\nconst ControlsContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: var(--spacing-sm);\n`;\n\nconst Button = styled.button`\n  background-color: var(--${props => props.theme}-primary);\n  color: ${props => props.theme === 'dark' ? 'black' : 'white'};\n  border: none;\n  padding: var(--spacing-xs) var(--spacing-sm);\n  border-radius: var(--border-radius-sm);\n  cursor: pointer;\n  font-size: var(--font-size-sm);\n  \n  &:hover {\n    background-color: var(--${props => props.theme}-primary-variant);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst SaveStatus = styled.div<{ saved: boolean }>`\n  font-size: var(--font-size-xs);\n  color: ${props => props.saved ? 'var(--success)' : 'var(--warning)'};\n`;\n\ninterface TextWidgetConfig {\n  content: string;\n  fontSize: string;\n  textAlign: string;\n  fontWeight: string;\n  lastSaved?: string;\n}\n\nconst defaultConfig: TextWidgetConfig = {\n  content: 'Enter your text here...',\n  fontSize: 'var(--font-size-md)',\n  textAlign: 'left',\n  fontWeight: 'normal',\n};\n\nconst TextWidget: React.FC<WidgetProps> = ({ id, config, onConfigChange, isEditing }) => {\n  const { theme } = useTheme();\n  const widgetConfig = { ...defaultConfig, ...config } as TextWidgetConfig;\n  \n  const [text, setText] = useState(widgetConfig.content);\n  const [isEditable, setIsEditable] = useState(!!isEditing);\n  const [isSaved, setIsSaved] = useState(true);\n  \n  // Update text when config changes\n  useEffect(() => {\n    if (widgetConfig.content !== text) {\n      setText(widgetConfig.content);\n    }\n  }, [widgetConfig.content]);\n  \n  // Check if text has changed\n  useEffect(() => {\n    setIsSaved(text === widgetConfig.content);\n  }, [text, widgetConfig.content]);\n  \n  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  };\n  \n  const handleSave = () => {\n    if (onConfigChange) {\n      onConfigChange({\n        ...widgetConfig,\n        content: text,\n        lastSaved: new Date().toLocaleTimeString(),\n      });\n    }\n    setIsSaved(true);\n  };\n  \n  const toggleEdit = () => {\n    setIsEditable(!isEditable);\n    \n    // Save when exiting edit mode\n    if (isEditable && !isSaved) {\n      handleSave();\n    }\n  };\n  \n  return (\n    <TextContainer>\n      {isEditable ? (\n        <>\n          <ControlsContainer>\n            <Button onClick={toggleEdit} theme={theme}>\n              Done Editing\n            </Button>\n            <SaveStatus saved={isSaved}>\n              {isSaved \n                ? widgetConfig.lastSaved ? `Last saved at ${widgetConfig.lastSaved}` : 'All changes saved' \n                : 'Unsaved changes'}\n            </SaveStatus>\n            <Button onClick={handleSave} disabled={isSaved} theme={theme}>\n              Save\n            </Button>\n          </ControlsContainer>\n          <EditableTextarea\n            value={text}\n            onChange={handleTextChange}\n            theme={theme}\n          />\n        </>\n      ) : (\n        <>\n          <ControlsContainer>\n            <Button onClick={toggleEdit} theme={theme}>\n              Edit Text\n            </Button>\n          </ControlsContainer>\n          <TextContent\n            fontSize={widgetConfig.fontSize}\n            textAlign={widgetConfig.textAlign}\n            fontWeight={widgetConfig.fontWeight}\n          >\n            {text}\n          </TextContent>\n        </>\n      )}\n    </TextContainer>\n  );\n};\n\nexport default withWidget(TextWidget, {\n  metadata: {\n    name: 'Text',\n    description: 'Display formatted text content',\n    category: WidgetCategory.UTILITY,\n    icon: 'üìù',\n    defaultSize: {\n      w: 6,\n      h: 2,\n    },\n    minW: 2,\n    minH: 1,\n  },\n  defaultConfig,\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}