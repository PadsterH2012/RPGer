{"ast":null,"code":"var _jsxFileName = \"/mnt/network_repo/test_ai_rpg/RPGer/client/src/components/widgets/StatsWidget.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useSocket } from '../../context/SocketContext';\nimport { useTheme } from '../../context/ThemeContext';\nimport { WidgetCategory } from '../../types/widget';\nimport withWidget from './withWidget';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StatsContainer = styled.div`\n  height: 100%;\n`;\n_c = StatsContainer;\nconst StatGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: var(--spacing-md);\n`;\n_c2 = StatGrid;\nconst StatItem = styled.div`\n  background-color: ${props => props.theme === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.05)'};\n  border-radius: var(--border-radius-sm);\n  padding: var(--spacing-md);\n`;\n_c3 = StatItem;\nconst StatLabel = styled.div`\n  font-size: var(--font-size-sm);\n  color: var(--${props => props.theme}-text-secondary);\n  margin-bottom: var(--spacing-xs);\n`;\n_c4 = StatLabel;\nconst StatValue = styled.div`\n  font-size: var(--font-size-xl);\n  font-weight: 700;\n  color: var(--${props => props.theme}-primary);\n`;\n_c5 = StatValue;\nconst StatBar = styled.div`\n  height: 6px;\n  background-color: ${props => props.theme === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'};\n  border-radius: var(--border-radius-full);\n  margin-top: var(--spacing-sm);\n  overflow: hidden;\n`;\n_c6 = StatBar;\nconst StatBarFill = styled.div`\n  height: 100%;\n  width: ${props => props.width}%;\n  background-color: ${props => props.color};\n  border-radius: var(--border-radius-full);\n`;\n_c7 = StatBarFill;\n// Default stats for in-memory mode\nconst defaultStats = {\n  hp: {\n    current: 25,\n    maximum: 30\n  },\n  level: 3,\n  experience: 2500,\n  next_level_xp: 4000,\n  armor_class: 15\n};\nconst defaultConfig = {\n  showHp: true,\n  showLevel: true,\n  showExperience: true,\n  showArmorClass: true\n};\nconst StatsWidget = ({\n  id,\n  config\n}) => {\n  _s();\n  const {\n    theme\n  } = useTheme();\n  const {\n    socket,\n    isConnected\n  } = useSocket();\n  const widgetConfig = {\n    ...defaultConfig,\n    ...config\n  };\n  const [stats, setStats] = useState(defaultStats);\n  useEffect(() => {\n    if (socket && isConnected) {\n      // Listen for stats updates from the server\n      socket.on('player:statsUpdate', updatedStats => {\n        setStats(updatedStats);\n      });\n\n      // Request initial stats\n      socket.emit('player:requestStats');\n\n      // Cleanup listener on unmount\n      return () => {\n        socket.off('player:statsUpdate');\n      };\n    }\n  }, [socket, isConnected]);\n\n  // Calculate HP percentage\n  const hpPercent = stats.hp.maximum > 0 ? stats.hp.current / stats.hp.maximum * 100 : 0;\n\n  // Calculate XP percentage\n  const xpPercent = stats.next_level_xp > 0 ? stats.experience / stats.next_level_xp * 100 : 0;\n\n  // Determine HP bar color based on percentage\n  const getHpColor = () => {\n    if (hpPercent <= 25) return 'var(--dark-error)';\n    if (hpPercent <= 50) return 'orange';\n    return 'var(--dark-secondary)';\n  };\n  return /*#__PURE__*/_jsxDEV(StatsContainer, {\n    children: /*#__PURE__*/_jsxDEV(StatGrid, {\n      children: [widgetConfig.showHp && /*#__PURE__*/_jsxDEV(StatItem, {\n        theme: theme,\n        children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n          theme: theme,\n          children: \"Hit Points\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n          theme: theme,\n          children: [stats.hp.current, \"/\", stats.hp.maximum]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StatBar, {\n          theme: theme,\n          children: /*#__PURE__*/_jsxDEV(StatBarFill, {\n            width: hpPercent,\n            color: getHpColor()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), widgetConfig.showLevel && /*#__PURE__*/_jsxDEV(StatItem, {\n        theme: theme,\n        children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n          theme: theme,\n          children: \"Level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n          theme: theme,\n          children: stats.level\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), widgetConfig.showExperience && /*#__PURE__*/_jsxDEV(StatItem, {\n        theme: theme,\n        children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n          theme: theme,\n          children: \"Experience\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n          theme: theme,\n          children: [stats.experience, \"/\", stats.next_level_xp]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StatBar, {\n          theme: theme,\n          children: /*#__PURE__*/_jsxDEV(StatBarFill, {\n            width: xpPercent,\n            color: \"var(--dark-primary)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), widgetConfig.showArmorClass && /*#__PURE__*/_jsxDEV(StatItem, {\n        theme: theme,\n        children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n          theme: theme,\n          children: \"Armor Class\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StatValue, {\n          theme: theme,\n          children: stats.armor_class\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(StatsWidget, \"ZQf6M+yiszAQboEsrm3EhlJaGMo=\", false, function () {\n  return [useTheme, useSocket];\n});\n_c8 = StatsWidget;\nexport default _c9 = withWidget(StatsWidget, {\n  metadata: {\n    name: 'Character Stats',\n    description: 'Display character statistics',\n    category: WidgetCategory.CHARACTER,\n    icon: 'ðŸ“Š',\n    defaultSize: {\n      w: 6,\n      h: 2\n    },\n    minW: 3,\n    minH: 2\n  },\n  defaultConfig\n});\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"StatsContainer\");\n$RefreshReg$(_c2, \"StatGrid\");\n$RefreshReg$(_c3, \"StatItem\");\n$RefreshReg$(_c4, \"StatLabel\");\n$RefreshReg$(_c5, \"StatValue\");\n$RefreshReg$(_c6, \"StatBar\");\n$RefreshReg$(_c7, \"StatBarFill\");\n$RefreshReg$(_c8, \"StatsWidget\");\n$RefreshReg$(_c9, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","styled","useSocket","useTheme","WidgetCategory","withWidget","jsxDEV","_jsxDEV","StatsContainer","div","_c","StatGrid","_c2","StatItem","props","theme","_c3","StatLabel","_c4","StatValue","_c5","StatBar","_c6","StatBarFill","width","color","_c7","defaultStats","hp","current","maximum","level","experience","next_level_xp","armor_class","defaultConfig","showHp","showLevel","showExperience","showArmorClass","StatsWidget","id","config","_s","socket","isConnected","widgetConfig","stats","setStats","on","updatedStats","emit","off","hpPercent","xpPercent","getHpColor","children","fileName","_jsxFileName","lineNumber","columnNumber","_c8","_c9","metadata","name","description","category","CHARACTER","icon","defaultSize","w","h","minW","minH","$RefreshReg$"],"sources":["/mnt/network_repo/test_ai_rpg/RPGer/client/src/components/widgets/StatsWidget.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useSocket } from '../../context/SocketContext';\nimport { useTheme } from '../../context/ThemeContext';\nimport { WidgetProps, WidgetCategory } from '../../types/widget';\nimport withWidget from './withWidget';\n\nconst StatsContainer = styled.div`\n  height: 100%;\n`;\n\nconst StatGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: var(--spacing-md);\n`;\n\nconst StatItem = styled.div`\n  background-color: ${props => props.theme === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.05)'};\n  border-radius: var(--border-radius-sm);\n  padding: var(--spacing-md);\n`;\n\nconst StatLabel = styled.div`\n  font-size: var(--font-size-sm);\n  color: var(--${props => props.theme}-text-secondary);\n  margin-bottom: var(--spacing-xs);\n`;\n\nconst StatValue = styled.div`\n  font-size: var(--font-size-xl);\n  font-weight: 700;\n  color: var(--${props => props.theme}-primary);\n`;\n\nconst StatBar = styled.div`\n  height: 6px;\n  background-color: ${props => props.theme === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'};\n  border-radius: var(--border-radius-full);\n  margin-top: var(--spacing-sm);\n  overflow: hidden;\n`;\n\nconst StatBarFill = styled.div<{ width: number; color: string }>`\n  height: 100%;\n  width: ${props => props.width}%;\n  background-color: ${props => props.color};\n  border-radius: var(--border-radius-full);\n`;\n\ninterface PlayerStats {\n  hp: {\n    current: number;\n    maximum: number;\n  };\n  level: number;\n  experience: number;\n  next_level_xp: number;\n  armor_class: number;\n}\n\n// Default stats for in-memory mode\nconst defaultStats: PlayerStats = {\n  hp: {\n    current: 25,\n    maximum: 30,\n  },\n  level: 3,\n  experience: 2500,\n  next_level_xp: 4000,\n  armor_class: 15,\n};\n\ninterface StatsWidgetConfig {\n  showHp: boolean;\n  showLevel: boolean;\n  showExperience: boolean;\n  showArmorClass: boolean;\n}\n\nconst defaultConfig: StatsWidgetConfig = {\n  showHp: true,\n  showLevel: true,\n  showExperience: true,\n  showArmorClass: true,\n};\n\nconst StatsWidget: React.FC<WidgetProps> = ({ id, config }) => {\n  const { theme } = useTheme();\n  const { socket, isConnected } = useSocket();\n  const widgetConfig = { ...defaultConfig, ...config } as StatsWidgetConfig;\n  const [stats, setStats] = useState<PlayerStats>(defaultStats);\n\n  useEffect(() => {\n    if (socket && isConnected) {\n      // Listen for stats updates from the server\n      socket.on('player:statsUpdate', (updatedStats: PlayerStats) => {\n        setStats(updatedStats);\n      });\n\n      // Request initial stats\n      socket.emit('player:requestStats');\n\n      // Cleanup listener on unmount\n      return () => {\n        socket.off('player:statsUpdate');\n      };\n    }\n  }, [socket, isConnected]);\n\n  // Calculate HP percentage\n  const hpPercent = stats.hp.maximum > 0 ? (stats.hp.current / stats.hp.maximum) * 100 : 0;\n\n  // Calculate XP percentage\n  const xpPercent = stats.next_level_xp > 0 ? (stats.experience / stats.next_level_xp) * 100 : 0;\n\n  // Determine HP bar color based on percentage\n  const getHpColor = () => {\n    if (hpPercent <= 25) return 'var(--dark-error)';\n    if (hpPercent <= 50) return 'orange';\n    return 'var(--dark-secondary)';\n  };\n\n  return (\n    <StatsContainer>\n      <StatGrid>\n        {widgetConfig.showHp && (\n          <StatItem theme={theme}>\n            <StatLabel theme={theme}>Hit Points</StatLabel>\n            <StatValue theme={theme}>{stats.hp.current}/{stats.hp.maximum}</StatValue>\n            <StatBar theme={theme}>\n              <StatBarFill width={hpPercent} color={getHpColor()} />\n            </StatBar>\n          </StatItem>\n        )}\n\n        {widgetConfig.showLevel && (\n          <StatItem theme={theme}>\n            <StatLabel theme={theme}>Level</StatLabel>\n            <StatValue theme={theme}>{stats.level}</StatValue>\n          </StatItem>\n        )}\n\n        {widgetConfig.showExperience && (\n          <StatItem theme={theme}>\n            <StatLabel theme={theme}>Experience</StatLabel>\n            <StatValue theme={theme}>{stats.experience}/{stats.next_level_xp}</StatValue>\n            <StatBar theme={theme}>\n              <StatBarFill width={xpPercent} color=\"var(--dark-primary)\" />\n            </StatBar>\n          </StatItem>\n        )}\n\n        {widgetConfig.showArmorClass && (\n          <StatItem theme={theme}>\n            <StatLabel theme={theme}>Armor Class</StatLabel>\n            <StatValue theme={theme}>{stats.armor_class}</StatValue>\n          </StatItem>\n        )}\n      </StatGrid>\n    </StatsContainer>\n  );\n};\n\nexport default withWidget(StatsWidget, {\n  metadata: {\n    name: 'Character Stats',\n    description: 'Display character statistics',\n    category: WidgetCategory.CHARACTER,\n    icon: 'ðŸ“Š',\n    defaultSize: {\n      w: 6,\n      h: 2,\n    },\n    minW: 3,\n    minH: 2,\n  },\n  defaultConfig,\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}