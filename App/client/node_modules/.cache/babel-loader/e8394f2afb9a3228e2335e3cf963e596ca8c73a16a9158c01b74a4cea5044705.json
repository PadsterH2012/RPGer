{"ast":null,"code":"var _jsxFileName = \"/mnt/network_repo/test_ai_rpg/RPGer/client/src/components/widgets/CountdownWidget.tsx\",\n  _s = $RefreshSig$();\n/**\n * CountdownWidget Component\n * \n * Widget for displaying a countdown timer.\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useTheme } from '../../context/ThemeContext';\nimport { WidgetCategory } from '../../types/widget';\nimport withWidget from './withWidget';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CountdownContainer = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`;\n_c = CountdownContainer;\nconst Title = styled.div`\n  font-size: var(--font-size-md);\n  font-weight: 600;\n  margin-bottom: var(--spacing-sm);\n`;\n_c2 = Title;\nconst TimeDisplay = styled.div`\n  font-size: var(--font-size-xxl);\n  font-weight: 700;\n  margin-bottom: var(--spacing-md);\n  font-family: var(--font-family-mono, monospace);\n`;\n_c3 = TimeDisplay;\nconst TimeUnit = styled.span`\n  color: ${props => props.highlight ? `var(--${props.theme}-primary)` : 'inherit'};\n`;\n_c4 = TimeUnit;\nconst ControlsContainer = styled.div`\n  display: flex;\n  gap: var(--spacing-sm);\n  margin-top: var(--spacing-sm);\n`;\n_c5 = ControlsContainer;\nconst Button = styled.button`\n  background-color: var(--${props => props.theme}-primary);\n  color: ${props => props.theme === 'dark' ? 'black' : 'white'};\n  border: none;\n  padding: var(--spacing-xs) var(--spacing-sm);\n  border-radius: var(--border-radius-sm);\n  cursor: pointer;\n  font-size: var(--font-size-sm);\n  \n  &:hover {\n    background-color: var(--${props => props.theme}-primary-variant);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n_c6 = Button;\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 8px;\n  background-color: ${props => props.theme === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'};\n  border-radius: var(--border-radius-full);\n  margin-top: var(--spacing-md);\n  overflow: hidden;\n`;\n_c7 = ProgressBar;\nconst ProgressFill = styled.div`\n  height: 100%;\n  width: ${props => props.width}%;\n  background-color: ${props => props.color};\n  border-radius: var(--border-radius-full);\n  transition: width 1s linear;\n`;\n_c8 = ProgressFill;\nconst InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin-bottom: var(--spacing-md);\n`;\n_c9 = InputContainer;\nconst InputLabel = styled.label`\n  font-size: var(--font-size-sm);\n  margin-bottom: var(--spacing-xs);\n  color: var(--${props => props.theme}-text-secondary);\n`;\n_c0 = InputLabel;\nconst Input = styled.input`\n  padding: var(--spacing-sm);\n  border: 1px solid var(--${props => props.theme}-border);\n  border-radius: var(--border-radius-sm);\n  background-color: var(--${props => props.theme}-surface);\n  color: var(--${props => props.theme}-text-primary);\n  \n  &:focus {\n    outline: none;\n    border-color: var(--${props => props.theme}-primary);\n  }\n`;\n_c1 = Input;\nconst defaultConfig = {\n  title: 'Countdown',\n  duration: 300,\n  // 5 minutes\n  autoStart: false,\n  showControls: true,\n  showProgress: true\n};\nconst CountdownWidget = ({\n  id,\n  config,\n  onConfigChange\n}) => {\n  _s();\n  const {\n    theme\n  } = useTheme();\n  const widgetConfig = {\n    ...defaultConfig,\n    ...config\n  };\n  const [timeLeft, setTimeLeft] = useState(widgetConfig.duration);\n  const [isRunning, setIsRunning] = useState(widgetConfig.autoStart);\n  const [isEditing, setIsEditing] = useState(false);\n  const [inputDuration, setInputDuration] = useState(widgetConfig.duration.toString());\n  const [inputTitle, setInputTitle] = useState(widgetConfig.title);\n\n  // Calculate progress percentage\n  const progressPercentage = (widgetConfig.duration - timeLeft) / widgetConfig.duration * 100;\n\n  // Get progress color based on time left\n  const getProgressColor = useCallback(() => {\n    const percentage = timeLeft / widgetConfig.duration;\n    if (percentage > 0.66) {\n      return 'var(--success)';\n    } else if (percentage > 0.33) {\n      return 'var(--warning)';\n    } else {\n      return 'var(--error)';\n    }\n  }, [timeLeft, widgetConfig.duration]);\n\n  // Format time as HH:MM:SS\n  const formatTime = useCallback(seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n\n  // Update countdown timer\n  useEffect(() => {\n    let timer;\n    if (isRunning && timeLeft > 0) {\n      timer = setInterval(() => {\n        setTimeLeft(prev => prev - 1);\n      }, 1000);\n    } else if (timeLeft === 0) {\n      setIsRunning(false);\n\n      // Play sound or show notification when timer ends\n      if ('Notification' in window && Notification.permission === 'granted') {\n        new Notification('Countdown Timer', {\n          body: `${widgetConfig.title} has ended!`,\n          icon: '/favicon.ico'\n        });\n      }\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [isRunning, timeLeft, widgetConfig.title]);\n\n  // Load end time from config if available\n  useEffect(() => {\n    if (widgetConfig.endTime) {\n      const now = Date.now();\n      const end = widgetConfig.endTime;\n      if (end > now) {\n        const secondsLeft = Math.floor((end - now) / 1000);\n        setTimeLeft(secondsLeft);\n        setIsRunning(true);\n      } else {\n        setTimeLeft(0);\n        setIsRunning(false);\n      }\n    } else {\n      setTimeLeft(widgetConfig.duration);\n    }\n  }, [widgetConfig.endTime, widgetConfig.duration]);\n\n  // Handle start/pause button click\n  const handleStartPause = () => {\n    if (!isRunning && timeLeft === 0) {\n      // Reset and start if timer has ended\n      setTimeLeft(widgetConfig.duration);\n      setIsRunning(true);\n\n      // Save end time to config\n      if (onConfigChange) {\n        onConfigChange({\n          ...widgetConfig,\n          endTime: Date.now() + widgetConfig.duration * 1000\n        });\n      }\n    } else {\n      setIsRunning(!isRunning);\n\n      // Save or clear end time based on running state\n      if (onConfigChange) {\n        if (!isRunning) {\n          onConfigChange({\n            ...widgetConfig,\n            endTime: Date.now() + timeLeft * 1000\n          });\n        } else {\n          onConfigChange({\n            ...widgetConfig,\n            endTime: undefined\n          });\n        }\n      }\n    }\n  };\n\n  // Handle reset button click\n  const handleReset = () => {\n    setTimeLeft(widgetConfig.duration);\n    setIsRunning(false);\n\n    // Clear end time in config\n    if (onConfigChange) {\n      onConfigChange({\n        ...widgetConfig,\n        endTime: undefined\n      });\n    }\n  };\n\n  // Handle edit button click\n  const handleEdit = () => {\n    setIsEditing(true);\n    setIsRunning(false);\n  };\n\n  // Handle save button click\n  const handleSave = () => {\n    const newDuration = parseInt(inputDuration, 10) || widgetConfig.duration;\n    if (onConfigChange) {\n      onConfigChange({\n        ...widgetConfig,\n        title: inputTitle,\n        duration: newDuration,\n        endTime: undefined\n      });\n    }\n    setTimeLeft(newDuration);\n    setIsEditing(false);\n  };\n  return /*#__PURE__*/_jsxDEV(CountdownContainer, {\n    children: isEditing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(InputContainer, {\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          theme: theme,\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          value: inputTitle,\n          onChange: e => setInputTitle(e.target.value),\n          theme: theme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InputContainer, {\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          theme: theme,\n          children: \"Duration (seconds)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"number\",\n          value: inputDuration,\n          onChange: e => setInputDuration(e.target.value),\n          min: \"1\",\n          theme: theme\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSave,\n        theme: theme,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: widgetConfig.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TimeDisplay, {\n        children: formatTime(timeLeft).split(':').map((unit, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [index > 0 && ':', /*#__PURE__*/_jsxDEV(TimeUnit, {\n            highlight: index === 2,\n            theme: theme,\n            children: unit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this), widgetConfig.showControls && /*#__PURE__*/_jsxDEV(ControlsContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleStartPause,\n          theme: theme,\n          children: isRunning ? 'Pause' : timeLeft === 0 ? 'Restart' : 'Start'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleReset,\n          disabled: timeLeft === widgetConfig.duration && !isRunning,\n          theme: theme,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleEdit,\n          theme: theme,\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 13\n      }, this), widgetConfig.showProgress && /*#__PURE__*/_jsxDEV(ProgressBar, {\n        theme: theme,\n        children: /*#__PURE__*/_jsxDEV(ProgressFill, {\n          width: progressPercentage,\n          color: getProgressColor()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n};\n_s(CountdownWidget, \"vFpkhHCBBF9BUHJOUVR/6moCueg=\", false, function () {\n  return [useTheme];\n});\n_c10 = CountdownWidget;\nexport default _c11 = withWidget(CountdownWidget, {\n  metadata: {\n    name: 'Countdown',\n    description: 'Display a countdown timer',\n    category: WidgetCategory.UTILITY,\n    icon: '⏱️',\n    defaultSize: {\n      w: 4,\n      h: 3\n    },\n    minW: 2,\n    minH: 2\n  },\n  defaultConfig\n});\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1, _c10, _c11;\n$RefreshReg$(_c, \"CountdownContainer\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"TimeDisplay\");\n$RefreshReg$(_c4, \"TimeUnit\");\n$RefreshReg$(_c5, \"ControlsContainer\");\n$RefreshReg$(_c6, \"Button\");\n$RefreshReg$(_c7, \"ProgressBar\");\n$RefreshReg$(_c8, \"ProgressFill\");\n$RefreshReg$(_c9, \"InputContainer\");\n$RefreshReg$(_c0, \"InputLabel\");\n$RefreshReg$(_c1, \"Input\");\n$RefreshReg$(_c10, \"CountdownWidget\");\n$RefreshReg$(_c11, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","styled","useTheme","WidgetCategory","withWidget","jsxDEV","_jsxDEV","Fragment","_Fragment","CountdownContainer","div","_c","Title","_c2","TimeDisplay","_c3","TimeUnit","span","props","highlight","theme","_c4","ControlsContainer","_c5","Button","button","_c6","ProgressBar","_c7","ProgressFill","width","color","_c8","InputContainer","_c9","InputLabel","label","_c0","Input","input","_c1","defaultConfig","title","duration","autoStart","showControls","showProgress","CountdownWidget","id","config","onConfigChange","_s","widgetConfig","timeLeft","setTimeLeft","isRunning","setIsRunning","isEditing","setIsEditing","inputDuration","setInputDuration","toString","inputTitle","setInputTitle","progressPercentage","getProgressColor","percentage","formatTime","seconds","hours","Math","floor","minutes","secs","padStart","timer","setInterval","prev","window","Notification","permission","body","icon","clearInterval","endTime","now","Date","end","secondsLeft","handleStartPause","undefined","handleReset","handleEdit","handleSave","newDuration","parseInt","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","min","onClick","split","map","unit","index","disabled","_c10","_c11","metadata","name","description","category","UTILITY","defaultSize","w","h","minW","minH","$RefreshReg$"],"sources":["/mnt/network_repo/test_ai_rpg/RPGer/client/src/components/widgets/CountdownWidget.tsx"],"sourcesContent":["/**\n * CountdownWidget Component\n * \n * Widget for displaying a countdown timer.\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useTheme } from '../../context/ThemeContext';\nimport { WidgetProps, WidgetCategory } from '../../types/widget';\nimport withWidget from './withWidget';\n\nconst CountdownContainer = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`;\n\nconst Title = styled.div`\n  font-size: var(--font-size-md);\n  font-weight: 600;\n  margin-bottom: var(--spacing-sm);\n`;\n\nconst TimeDisplay = styled.div`\n  font-size: var(--font-size-xxl);\n  font-weight: 700;\n  margin-bottom: var(--spacing-md);\n  font-family: var(--font-family-mono, monospace);\n`;\n\nconst TimeUnit = styled.span<{ highlight: boolean }>`\n  color: ${props => props.highlight ? `var(--${props.theme}-primary)` : 'inherit'};\n`;\n\nconst ControlsContainer = styled.div`\n  display: flex;\n  gap: var(--spacing-sm);\n  margin-top: var(--spacing-sm);\n`;\n\nconst Button = styled.button`\n  background-color: var(--${props => props.theme}-primary);\n  color: ${props => props.theme === 'dark' ? 'black' : 'white'};\n  border: none;\n  padding: var(--spacing-xs) var(--spacing-sm);\n  border-radius: var(--border-radius-sm);\n  cursor: pointer;\n  font-size: var(--font-size-sm);\n  \n  &:hover {\n    background-color: var(--${props => props.theme}-primary-variant);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst ProgressBar = styled.div`\n  width: 100%;\n  height: 8px;\n  background-color: ${props => props.theme === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'};\n  border-radius: var(--border-radius-full);\n  margin-top: var(--spacing-md);\n  overflow: hidden;\n`;\n\nconst ProgressFill = styled.div<{ width: number; color: string }>`\n  height: 100%;\n  width: ${props => props.width}%;\n  background-color: ${props => props.color};\n  border-radius: var(--border-radius-full);\n  transition: width 1s linear;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin-bottom: var(--spacing-md);\n`;\n\nconst InputLabel = styled.label`\n  font-size: var(--font-size-sm);\n  margin-bottom: var(--spacing-xs);\n  color: var(--${props => props.theme}-text-secondary);\n`;\n\nconst Input = styled.input`\n  padding: var(--spacing-sm);\n  border: 1px solid var(--${props => props.theme}-border);\n  border-radius: var(--border-radius-sm);\n  background-color: var(--${props => props.theme}-surface);\n  color: var(--${props => props.theme}-text-primary);\n  \n  &:focus {\n    outline: none;\n    border-color: var(--${props => props.theme}-primary);\n  }\n`;\n\ninterface CountdownWidgetConfig {\n  title: string;\n  duration: number; // in seconds\n  autoStart: boolean;\n  showControls: boolean;\n  showProgress: boolean;\n  endTime?: number; // timestamp\n}\n\nconst defaultConfig: CountdownWidgetConfig = {\n  title: 'Countdown',\n  duration: 300, // 5 minutes\n  autoStart: false,\n  showControls: true,\n  showProgress: true,\n};\n\nconst CountdownWidget: React.FC<WidgetProps> = ({ id, config, onConfigChange }) => {\n  const { theme } = useTheme();\n  const widgetConfig = { ...defaultConfig, ...config } as CountdownWidgetConfig;\n  \n  const [timeLeft, setTimeLeft] = useState<number>(widgetConfig.duration);\n  const [isRunning, setIsRunning] = useState<boolean>(widgetConfig.autoStart);\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [inputDuration, setInputDuration] = useState<string>(widgetConfig.duration.toString());\n  const [inputTitle, setInputTitle] = useState<string>(widgetConfig.title);\n  \n  // Calculate progress percentage\n  const progressPercentage = (widgetConfig.duration - timeLeft) / widgetConfig.duration * 100;\n  \n  // Get progress color based on time left\n  const getProgressColor = useCallback(() => {\n    const percentage = timeLeft / widgetConfig.duration;\n    \n    if (percentage > 0.66) {\n      return 'var(--success)';\n    } else if (percentage > 0.33) {\n      return 'var(--warning)';\n    } else {\n      return 'var(--error)';\n    }\n  }, [timeLeft, widgetConfig.duration]);\n  \n  // Format time as HH:MM:SS\n  const formatTime = useCallback((seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }, []);\n  \n  // Update countdown timer\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    \n    if (isRunning && timeLeft > 0) {\n      timer = setInterval(() => {\n        setTimeLeft(prev => prev - 1);\n      }, 1000);\n    } else if (timeLeft === 0) {\n      setIsRunning(false);\n      \n      // Play sound or show notification when timer ends\n      if ('Notification' in window && Notification.permission === 'granted') {\n        new Notification('Countdown Timer', {\n          body: `${widgetConfig.title} has ended!`,\n          icon: '/favicon.ico',\n        });\n      }\n    }\n    \n    return () => {\n      clearInterval(timer);\n    };\n  }, [isRunning, timeLeft, widgetConfig.title]);\n  \n  // Load end time from config if available\n  useEffect(() => {\n    if (widgetConfig.endTime) {\n      const now = Date.now();\n      const end = widgetConfig.endTime;\n      \n      if (end > now) {\n        const secondsLeft = Math.floor((end - now) / 1000);\n        setTimeLeft(secondsLeft);\n        setIsRunning(true);\n      } else {\n        setTimeLeft(0);\n        setIsRunning(false);\n      }\n    } else {\n      setTimeLeft(widgetConfig.duration);\n    }\n  }, [widgetConfig.endTime, widgetConfig.duration]);\n  \n  // Handle start/pause button click\n  const handleStartPause = () => {\n    if (!isRunning && timeLeft === 0) {\n      // Reset and start if timer has ended\n      setTimeLeft(widgetConfig.duration);\n      setIsRunning(true);\n      \n      // Save end time to config\n      if (onConfigChange) {\n        onConfigChange({\n          ...widgetConfig,\n          endTime: Date.now() + widgetConfig.duration * 1000,\n        });\n      }\n    } else {\n      setIsRunning(!isRunning);\n      \n      // Save or clear end time based on running state\n      if (onConfigChange) {\n        if (!isRunning) {\n          onConfigChange({\n            ...widgetConfig,\n            endTime: Date.now() + timeLeft * 1000,\n          });\n        } else {\n          onConfigChange({\n            ...widgetConfig,\n            endTime: undefined,\n          });\n        }\n      }\n    }\n  };\n  \n  // Handle reset button click\n  const handleReset = () => {\n    setTimeLeft(widgetConfig.duration);\n    setIsRunning(false);\n    \n    // Clear end time in config\n    if (onConfigChange) {\n      onConfigChange({\n        ...widgetConfig,\n        endTime: undefined,\n      });\n    }\n  };\n  \n  // Handle edit button click\n  const handleEdit = () => {\n    setIsEditing(true);\n    setIsRunning(false);\n  };\n  \n  // Handle save button click\n  const handleSave = () => {\n    const newDuration = parseInt(inputDuration, 10) || widgetConfig.duration;\n    \n    if (onConfigChange) {\n      onConfigChange({\n        ...widgetConfig,\n        title: inputTitle,\n        duration: newDuration,\n        endTime: undefined,\n      });\n    }\n    \n    setTimeLeft(newDuration);\n    setIsEditing(false);\n  };\n  \n  return (\n    <CountdownContainer>\n      {isEditing ? (\n        <>\n          <InputContainer>\n            <InputLabel theme={theme}>Title</InputLabel>\n            <Input\n              type=\"text\"\n              value={inputTitle}\n              onChange={(e) => setInputTitle(e.target.value)}\n              theme={theme}\n            />\n          </InputContainer>\n          \n          <InputContainer>\n            <InputLabel theme={theme}>Duration (seconds)</InputLabel>\n            <Input\n              type=\"number\"\n              value={inputDuration}\n              onChange={(e) => setInputDuration(e.target.value)}\n              min=\"1\"\n              theme={theme}\n            />\n          </InputContainer>\n          \n          <Button onClick={handleSave} theme={theme}>\n            Save\n          </Button>\n        </>\n      ) : (\n        <>\n          <Title>{widgetConfig.title}</Title>\n          \n          <TimeDisplay>\n            {formatTime(timeLeft).split(':').map((unit, index) => (\n              <React.Fragment key={index}>\n                {index > 0 && ':'}\n                <TimeUnit highlight={index === 2} theme={theme}>\n                  {unit}\n                </TimeUnit>\n              </React.Fragment>\n            ))}\n          </TimeDisplay>\n          \n          {widgetConfig.showControls && (\n            <ControlsContainer>\n              <Button onClick={handleStartPause} theme={theme}>\n                {isRunning ? 'Pause' : timeLeft === 0 ? 'Restart' : 'Start'}\n              </Button>\n              <Button onClick={handleReset} disabled={timeLeft === widgetConfig.duration && !isRunning} theme={theme}>\n                Reset\n              </Button>\n              <Button onClick={handleEdit} theme={theme}>\n                Edit\n              </Button>\n            </ControlsContainer>\n          )}\n          \n          {widgetConfig.showProgress && (\n            <ProgressBar theme={theme}>\n              <ProgressFill width={progressPercentage} color={getProgressColor()} />\n            </ProgressBar>\n          )}\n        </>\n      )}\n    </CountdownContainer>\n  );\n};\n\nexport default withWidget(CountdownWidget, {\n  metadata: {\n    name: 'Countdown',\n    description: 'Display a countdown timer',\n    category: WidgetCategory.UTILITY,\n    icon: '⏱️',\n    defaultSize: {\n      w: 4,\n      h: 3,\n    },\n    minW: 2,\n    minH: 2,\n  },\n  defaultConfig,\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,SAAsBC,cAAc,QAAQ,oBAAoB;AAChE,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtC,MAAMC,kBAAkB,GAAGR,MAAM,CAACS,GAAG;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAPIF,kBAAkB;AASxB,MAAMG,KAAK,GAAGX,MAAM,CAACS,GAAG;AACxB;AACA;AACA;AACA,CAAC;AAACG,GAAA,GAJID,KAAK;AAMX,MAAME,WAAW,GAAGb,MAAM,CAACS,GAAG;AAC9B;AACA;AACA;AACA;AACA,CAAC;AAACK,GAAA,GALID,WAAW;AAOjB,MAAME,QAAQ,GAAGf,MAAM,CAACgB,IAA4B;AACpD,WAAWC,KAAK,IAAIA,KAAK,CAACC,SAAS,GAAG,SAASD,KAAK,CAACE,KAAK,WAAW,GAAG,SAAS;AACjF,CAAC;AAACC,GAAA,GAFIL,QAAQ;AAId,MAAMM,iBAAiB,GAAGrB,MAAM,CAACS,GAAG;AACpC;AACA;AACA;AACA,CAAC;AAACa,GAAA,GAJID,iBAAiB;AAMvB,MAAME,MAAM,GAAGvB,MAAM,CAACwB,MAAM;AAC5B,4BAA4BP,KAAK,IAAIA,KAAK,CAACE,KAAK;AAChD,WAAWF,KAAK,IAAIA,KAAK,CAACE,KAAK,KAAK,MAAM,GAAG,OAAO,GAAG,OAAO;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8BF,KAAK,IAAIA,KAAK,CAACE,KAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACM,GAAA,GAjBIF,MAAM;AAmBZ,MAAMG,WAAW,GAAG1B,MAAM,CAACS,GAAG;AAC9B;AACA;AACA,sBAAsBQ,KAAK,IAAIA,KAAK,CAACE,KAAK,KAAK,MAAM,GAAG,0BAA0B,GAAG,oBAAoB;AACzG;AACA;AACA;AACA,CAAC;AAACQ,GAAA,GAPID,WAAW;AASjB,MAAME,YAAY,GAAG5B,MAAM,CAACS,GAAqC;AACjE;AACA,WAAWQ,KAAK,IAAIA,KAAK,CAACY,KAAK;AAC/B,sBAAsBZ,KAAK,IAAIA,KAAK,CAACa,KAAK;AAC1C;AACA;AACA,CAAC;AAACC,GAAA,GANIH,YAAY;AAQlB,MAAMI,cAAc,GAAGhC,MAAM,CAACS,GAAG;AACjC;AACA;AACA;AACA;AACA,CAAC;AAACwB,GAAA,GALID,cAAc;AAOpB,MAAME,UAAU,GAAGlC,MAAM,CAACmC,KAAK;AAC/B;AACA;AACA,iBAAiBlB,KAAK,IAAIA,KAAK,CAACE,KAAK;AACrC,CAAC;AAACiB,GAAA,GAJIF,UAAU;AAMhB,MAAMG,KAAK,GAAGrC,MAAM,CAACsC,KAAK;AAC1B;AACA,4BAA4BrB,KAAK,IAAIA,KAAK,CAACE,KAAK;AAChD;AACA,4BAA4BF,KAAK,IAAIA,KAAK,CAACE,KAAK;AAChD,iBAAiBF,KAAK,IAAIA,KAAK,CAACE,KAAK;AACrC;AACA;AACA;AACA,0BAA0BF,KAAK,IAAIA,KAAK,CAACE,KAAK;AAC9C;AACA,CAAC;AAACoB,GAAA,GAXIF,KAAK;AAsBX,MAAMG,aAAoC,GAAG;EAC3CC,KAAK,EAAE,WAAW;EAClBC,QAAQ,EAAE,GAAG;EAAE;EACfC,SAAS,EAAE,KAAK;EAChBC,YAAY,EAAE,IAAI;EAClBC,YAAY,EAAE;AAChB,CAAC;AAED,MAAMC,eAAsC,GAAGA,CAAC;EAAEC,EAAE;EAAEC,MAAM;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACjF,MAAM;IAAE/B;EAAM,CAAC,GAAGlB,QAAQ,CAAC,CAAC;EAC5B,MAAMkD,YAAY,GAAG;IAAE,GAAGX,aAAa;IAAE,GAAGQ;EAAO,CAA0B;EAE7E,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGxD,QAAQ,CAASsD,YAAY,CAACT,QAAQ,CAAC;EACvE,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAG1D,QAAQ,CAAUsD,YAAY,CAACR,SAAS,CAAC;EAC3E,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAG5D,QAAQ,CAAU,KAAK,CAAC;EAC1D,MAAM,CAAC6D,aAAa,EAAEC,gBAAgB,CAAC,GAAG9D,QAAQ,CAASsD,YAAY,CAACT,QAAQ,CAACkB,QAAQ,CAAC,CAAC,CAAC;EAC5F,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGjE,QAAQ,CAASsD,YAAY,CAACV,KAAK,CAAC;;EAExE;EACA,MAAMsB,kBAAkB,GAAG,CAACZ,YAAY,CAACT,QAAQ,GAAGU,QAAQ,IAAID,YAAY,CAACT,QAAQ,GAAG,GAAG;;EAE3F;EACA,MAAMsB,gBAAgB,GAAGjE,WAAW,CAAC,MAAM;IACzC,MAAMkE,UAAU,GAAGb,QAAQ,GAAGD,YAAY,CAACT,QAAQ;IAEnD,IAAIuB,UAAU,GAAG,IAAI,EAAE;MACrB,OAAO,gBAAgB;IACzB,CAAC,MAAM,IAAIA,UAAU,GAAG,IAAI,EAAE;MAC5B,OAAO,gBAAgB;IACzB,CAAC,MAAM;MACL,OAAO,cAAc;IACvB;EACF,CAAC,EAAE,CAACb,QAAQ,EAAED,YAAY,CAACT,QAAQ,CAAC,CAAC;;EAErC;EACA,MAAMwB,UAAU,GAAGnE,WAAW,CAAEoE,OAAe,IAAa;IAC1D,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,IAAI,CAAC;IACxC,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEH,OAAO,GAAG,IAAI,GAAI,EAAE,CAAC;IACjD,MAAMK,IAAI,GAAGL,OAAO,GAAG,EAAE;IAEzB,OAAO,GAAGC,KAAK,CAACR,QAAQ,CAAC,CAAC,CAACa,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIF,OAAO,CAACX,QAAQ,CAAC,CAAC,CAACa,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAID,IAAI,CAACZ,QAAQ,CAAC,CAAC,CAACa,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EAC1H,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA3E,SAAS,CAAC,MAAM;IACd,IAAI4E,KAAqB;IAEzB,IAAIpB,SAAS,IAAIF,QAAQ,GAAG,CAAC,EAAE;MAC7BsB,KAAK,GAAGC,WAAW,CAAC,MAAM;QACxBtB,WAAW,CAACuB,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;MAC/B,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,MAAM,IAAIxB,QAAQ,KAAK,CAAC,EAAE;MACzBG,YAAY,CAAC,KAAK,CAAC;;MAEnB;MACA,IAAI,cAAc,IAAIsB,MAAM,IAAIC,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;QACrE,IAAID,YAAY,CAAC,iBAAiB,EAAE;UAClCE,IAAI,EAAE,GAAG7B,YAAY,CAACV,KAAK,aAAa;UACxCwC,IAAI,EAAE;QACR,CAAC,CAAC;MACJ;IACF;IAEA,OAAO,MAAM;MACXC,aAAa,CAACR,KAAK,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,CAACpB,SAAS,EAAEF,QAAQ,EAAED,YAAY,CAACV,KAAK,CAAC,CAAC;;EAE7C;EACA3C,SAAS,CAAC,MAAM;IACd,IAAIqD,YAAY,CAACgC,OAAO,EAAE;MACxB,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;MACtB,MAAME,GAAG,GAAGnC,YAAY,CAACgC,OAAO;MAEhC,IAAIG,GAAG,GAAGF,GAAG,EAAE;QACb,MAAMG,WAAW,GAAGlB,IAAI,CAACC,KAAK,CAAC,CAACgB,GAAG,GAAGF,GAAG,IAAI,IAAI,CAAC;QAClD/B,WAAW,CAACkC,WAAW,CAAC;QACxBhC,YAAY,CAAC,IAAI,CAAC;MACpB,CAAC,MAAM;QACLF,WAAW,CAAC,CAAC,CAAC;QACdE,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC,MAAM;MACLF,WAAW,CAACF,YAAY,CAACT,QAAQ,CAAC;IACpC;EACF,CAAC,EAAE,CAACS,YAAY,CAACgC,OAAO,EAAEhC,YAAY,CAACT,QAAQ,CAAC,CAAC;;EAEjD;EACA,MAAM8C,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAI,CAAClC,SAAS,IAAIF,QAAQ,KAAK,CAAC,EAAE;MAChC;MACAC,WAAW,CAACF,YAAY,CAACT,QAAQ,CAAC;MAClCa,YAAY,CAAC,IAAI,CAAC;;MAElB;MACA,IAAIN,cAAc,EAAE;QAClBA,cAAc,CAAC;UACb,GAAGE,YAAY;UACfgC,OAAO,EAAEE,IAAI,CAACD,GAAG,CAAC,CAAC,GAAGjC,YAAY,CAACT,QAAQ,GAAG;QAChD,CAAC,CAAC;MACJ;IACF,CAAC,MAAM;MACLa,YAAY,CAAC,CAACD,SAAS,CAAC;;MAExB;MACA,IAAIL,cAAc,EAAE;QAClB,IAAI,CAACK,SAAS,EAAE;UACdL,cAAc,CAAC;YACb,GAAGE,YAAY;YACfgC,OAAO,EAAEE,IAAI,CAACD,GAAG,CAAC,CAAC,GAAGhC,QAAQ,GAAG;UACnC,CAAC,CAAC;QACJ,CAAC,MAAM;UACLH,cAAc,CAAC;YACb,GAAGE,YAAY;YACfgC,OAAO,EAAEM;UACX,CAAC,CAAC;QACJ;MACF;IACF;EACF,CAAC;;EAED;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBrC,WAAW,CAACF,YAAY,CAACT,QAAQ,CAAC;IAClCa,YAAY,CAAC,KAAK,CAAC;;IAEnB;IACA,IAAIN,cAAc,EAAE;MAClBA,cAAc,CAAC;QACb,GAAGE,YAAY;QACfgC,OAAO,EAAEM;MACX,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAME,UAAU,GAAGA,CAAA,KAAM;IACvBlC,YAAY,CAAC,IAAI,CAAC;IAClBF,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;;EAED;EACA,MAAMqC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,WAAW,GAAGC,QAAQ,CAACpC,aAAa,EAAE,EAAE,CAAC,IAAIP,YAAY,CAACT,QAAQ;IAExE,IAAIO,cAAc,EAAE;MAClBA,cAAc,CAAC;QACb,GAAGE,YAAY;QACfV,KAAK,EAAEoB,UAAU;QACjBnB,QAAQ,EAAEmD,WAAW;QACrBV,OAAO,EAAEM;MACX,CAAC,CAAC;IACJ;IAEApC,WAAW,CAACwC,WAAW,CAAC;IACxBpC,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,oBACEpD,OAAA,CAACG,kBAAkB;IAAAuF,QAAA,EAChBvC,SAAS,gBACRnD,OAAA,CAAAE,SAAA;MAAAwF,QAAA,gBACE1F,OAAA,CAAC2B,cAAc;QAAA+D,QAAA,gBACb1F,OAAA,CAAC6B,UAAU;UAACf,KAAK,EAAEA,KAAM;UAAA4E,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eAC5C9F,OAAA,CAACgC,KAAK;UACJ+D,IAAI,EAAC,MAAM;UACXC,KAAK,EAAExC,UAAW;UAClByC,QAAQ,EAAGC,CAAC,IAAKzC,aAAa,CAACyC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAC/ClF,KAAK,EAAEA;QAAM;UAAA6E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACY,CAAC,eAEjB9F,OAAA,CAAC2B,cAAc;QAAA+D,QAAA,gBACb1F,OAAA,CAAC6B,UAAU;UAACf,KAAK,EAAEA,KAAM;UAAA4E,QAAA,EAAC;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACzD9F,OAAA,CAACgC,KAAK;UACJ+D,IAAI,EAAC,QAAQ;UACbC,KAAK,EAAE3C,aAAc;UACrB4C,QAAQ,EAAGC,CAAC,IAAK5C,gBAAgB,CAAC4C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAClDI,GAAG,EAAC,GAAG;UACPtF,KAAK,EAAEA;QAAM;UAAA6E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACY,CAAC,eAEjB9F,OAAA,CAACkB,MAAM;QAACmF,OAAO,EAAEd,UAAW;QAACzE,KAAK,EAAEA,KAAM;QAAA4E,QAAA,EAAC;MAE3C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,eACT,CAAC,gBAEH9F,OAAA,CAAAE,SAAA;MAAAwF,QAAA,gBACE1F,OAAA,CAACM,KAAK;QAAAoF,QAAA,EAAE5C,YAAY,CAACV;MAAK;QAAAuD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAEnC9F,OAAA,CAACQ,WAAW;QAAAkF,QAAA,EACT7B,UAAU,CAACd,QAAQ,CAAC,CAACuD,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC/CzG,OAAA,CAACT,KAAK,CAACU,QAAQ;UAAAyF,QAAA,GACZe,KAAK,GAAG,CAAC,IAAI,GAAG,eACjBzG,OAAA,CAACU,QAAQ;YAACG,SAAS,EAAE4F,KAAK,KAAK,CAAE;YAAC3F,KAAK,EAAEA,KAAM;YAAA4E,QAAA,EAC5Cc;UAAI;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACG,CAAC;QAAA,GAJQW,KAAK;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKV,CACjB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACS,CAAC,EAEbhD,YAAY,CAACP,YAAY,iBACxBvC,OAAA,CAACgB,iBAAiB;QAAA0E,QAAA,gBAChB1F,OAAA,CAACkB,MAAM;UAACmF,OAAO,EAAElB,gBAAiB;UAACrE,KAAK,EAAEA,KAAM;UAAA4E,QAAA,EAC7CzC,SAAS,GAAG,OAAO,GAAGF,QAAQ,KAAK,CAAC,GAAG,SAAS,GAAG;QAAO;UAAA4C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrD,CAAC,eACT9F,OAAA,CAACkB,MAAM;UAACmF,OAAO,EAAEhB,WAAY;UAACqB,QAAQ,EAAE3D,QAAQ,KAAKD,YAAY,CAACT,QAAQ,IAAI,CAACY,SAAU;UAACnC,KAAK,EAAEA,KAAM;UAAA4E,QAAA,EAAC;QAExG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT9F,OAAA,CAACkB,MAAM;UAACmF,OAAO,EAAEf,UAAW;UAACxE,KAAK,EAAEA,KAAM;UAAA4E,QAAA,EAAC;QAE3C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACQ,CACpB,EAEAhD,YAAY,CAACN,YAAY,iBACxBxC,OAAA,CAACqB,WAAW;QAACP,KAAK,EAAEA,KAAM;QAAA4E,QAAA,eACxB1F,OAAA,CAACuB,YAAY;UAACC,KAAK,EAAEkC,kBAAmB;UAACjC,KAAK,EAAEkC,gBAAgB,CAAC;QAAE;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CACd;IAAA,eACD;EACH;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEzB,CAAC;AAACjD,EAAA,CAzNIJ,eAAsC;EAAA,QACxB7C,QAAQ;AAAA;AAAA+G,IAAA,GADtBlE,eAAsC;AA2N5C,eAAAmE,IAAA,GAAe9G,UAAU,CAAC2C,eAAe,EAAE;EACzCoE,QAAQ,EAAE;IACRC,IAAI,EAAE,WAAW;IACjBC,WAAW,EAAE,2BAA2B;IACxCC,QAAQ,EAAEnH,cAAc,CAACoH,OAAO;IAChCrC,IAAI,EAAE,IAAI;IACVsC,WAAW,EAAE;MACXC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE;IACL,CAAC;IACDC,IAAI,EAAE,CAAC;IACPC,IAAI,EAAE;EACR,CAAC;EACDnF;AACF,CAAC,CAAC;AAAC,IAAA9B,EAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAM,GAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAI,GAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAG,GAAA,EAAAyE,IAAA,EAAAC,IAAA;AAAAW,YAAA,CAAAlH,EAAA;AAAAkH,YAAA,CAAAhH,GAAA;AAAAgH,YAAA,CAAA9G,GAAA;AAAA8G,YAAA,CAAAxG,GAAA;AAAAwG,YAAA,CAAAtG,GAAA;AAAAsG,YAAA,CAAAnG,GAAA;AAAAmG,YAAA,CAAAjG,GAAA;AAAAiG,YAAA,CAAA7F,GAAA;AAAA6F,YAAA,CAAA3F,GAAA;AAAA2F,YAAA,CAAAxF,GAAA;AAAAwF,YAAA,CAAArF,GAAA;AAAAqF,YAAA,CAAAZ,IAAA;AAAAY,YAAA,CAAAX,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}