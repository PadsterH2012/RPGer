{"ast":null,"code":"var _jsxFileName = \"/mnt/network_repo/test_ai_rpg/RPGer/client/src/context/SocketContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(undefined);\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const connect = () => {\n    // Use environment variable for the server URL\n    const serverUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n    const newSocket = io(serverUrl, {\n      transports: ['websocket'],\n      autoConnect: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n    newSocket.on('connect', () => {\n      console.log('Socket connected');\n      setIsConnected(true);\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Socket disconnected');\n      setIsConnected(false);\n    });\n    newSocket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n      setIsConnected(false);\n    });\n    setSocket(newSocket);\n  };\n  const disconnect = () => {\n    if (socket) {\n      socket.disconnect();\n      setSocket(null);\n      setIsConnected(false);\n    }\n  };\n\n  // Connect to socket when component mounts\n  useEffect(() => {\n    connect();\n\n    // Cleanup on unmount\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, []);\n  const value = {\n    socket,\n    isConnected,\n    connect,\n    disconnect\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(SocketProvider, \"QMiDLkz4HTcH977k6GWSjZyAdcs=\");\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","SocketContext","undefined","SocketProvider","children","_s","socket","setSocket","isConnected","setIsConnected","connect","serverUrl","process","env","REACT_APP_SOCKET_URL","newSocket","transports","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","on","console","log","error","disconnect","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["/mnt/network_repo/test_ai_rpg/RPGer/client/src/context/SocketContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { io, Socket } from 'socket.io-client';\n\ninterface SocketContextType {\n  socket: Socket | null;\n  isConnected: boolean;\n  connect: () => void;\n  disconnect: () => void;\n}\n\nconst SocketContext = createContext<SocketContextType | undefined>(undefined);\n\ninterface SocketProviderProps {\n  children: ReactNode;\n}\n\nexport const SocketProvider: React.FC<SocketProviderProps> = ({ children }) => {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [isConnected, setIsConnected] = useState<boolean>(false);\n\n  const connect = () => {\n    // Use environment variable for the server URL\n    const serverUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n    const newSocket = io(serverUrl, {\n      transports: ['websocket'],\n      autoConnect: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n    });\n\n    newSocket.on('connect', () => {\n      console.log('Socket connected');\n      setIsConnected(true);\n    });\n\n    newSocket.on('disconnect', () => {\n      console.log('Socket disconnected');\n      setIsConnected(false);\n    });\n\n    newSocket.on('connect_error', (error) => {\n      console.error('Socket connection error:', error);\n      setIsConnected(false);\n    });\n\n    setSocket(newSocket);\n  };\n\n  const disconnect = () => {\n    if (socket) {\n      socket.disconnect();\n      setSocket(null);\n      setIsConnected(false);\n    }\n  };\n\n  // Connect to socket when component mounts\n  useEffect(() => {\n    connect();\n\n    // Cleanup on unmount\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, []);\n\n  const value = {\n    socket,\n    isConnected,\n    connect,\n    disconnect,\n  };\n\n  return (\n    <SocketContext.Provider value={value}>\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\nexport const useSocket = (): SocketContextType => {\n  const context = useContext(SocketContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAmB,OAAO;AACxF,SAASC,EAAE,QAAgB,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS9C,MAAMC,aAAa,gBAAGP,aAAa,CAAgCQ,SAAS,CAAC;AAM7E,OAAO,MAAMC,cAA6C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7E,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAgB,IAAI,CAAC;EACzD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAU,KAAK,CAAC;EAE9D,MAAMa,OAAO,GAAGA,CAAA,KAAM;IACpB;IACA,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,uBAAuB;IAC7E,MAAMC,SAAS,GAAGjB,EAAE,CAACa,SAAS,EAAE;MAC9BK,UAAU,EAAE,CAAC,WAAW,CAAC;MACzBC,WAAW,EAAE,IAAI;MACjBC,YAAY,EAAE,IAAI;MAClBC,oBAAoB,EAAE,CAAC;MACvBC,iBAAiB,EAAE;IACrB,CAAC,CAAC;IAEFL,SAAS,CAACM,EAAE,CAAC,SAAS,EAAE,MAAM;MAC5BC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/Bd,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC;IAEFM,SAAS,CAACM,EAAE,CAAC,YAAY,EAAE,MAAM;MAC/BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCd,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC;IAEFM,SAAS,CAACM,EAAE,CAAC,eAAe,EAAGG,KAAK,IAAK;MACvCF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDf,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC;IAEFF,SAAS,CAACQ,SAAS,CAAC;EACtB,CAAC;EAED,MAAMU,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAInB,MAAM,EAAE;MACVA,MAAM,CAACmB,UAAU,CAAC,CAAC;MACnBlB,SAAS,CAAC,IAAI,CAAC;MACfE,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IACdc,OAAO,CAAC,CAAC;;IAET;IACA,OAAO,MAAM;MACX,IAAIJ,MAAM,EAAE;QACVA,MAAM,CAACmB,UAAU,CAAC,CAAC;MACrB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,KAAK,GAAG;IACZpB,MAAM;IACNE,WAAW;IACXE,OAAO;IACPe;EACF,CAAC;EAED,oBACEzB,OAAA,CAACC,aAAa,CAAC0B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAtB,QAAA,EAClCA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAAC1B,EAAA,CAjEWF,cAA6C;AAAA6B,EAAA,GAA7C7B,cAA6C;AAmE1D,OAAO,MAAM8B,SAAS,GAAGA,CAAA,KAAyB;EAAAC,GAAA;EAChD,MAAMC,OAAO,GAAGxC,UAAU,CAACM,aAAa,CAAC;EACzC,IAAIkC,OAAO,KAAKjC,SAAS,EAAE;IACzB,MAAM,IAAIkC,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,SAAS;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}