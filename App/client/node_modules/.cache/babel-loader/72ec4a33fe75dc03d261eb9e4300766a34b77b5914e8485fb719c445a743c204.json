{"ast":null,"code":"var _jsxFileName = \"/mnt/network_repo/test_ai_rpg/RPGer/client/src/context/ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // Check if user has a saved theme preference or use system preference\n  const getSavedTheme = () => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      return savedTheme;\n    }\n\n    // Check system preference\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    return prefersDark ? 'dark' : 'light';\n  };\n  const [theme, setTheme] = useState(getSavedTheme);\n\n  // Update localStorage when theme changes\n  useEffect(() => {\n    localStorage.setItem('theme', theme);\n    document.documentElement.setAttribute('data-theme', theme);\n  }, [theme]);\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  const value = {\n    theme,\n    toggleTheme,\n    setTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"RiM4repCE//oLpcjApoQuTpTqQc=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","getSavedTheme","savedTheme","localStorage","getItem","prefersDark","window","matchMedia","matches","theme","setTheme","setItem","document","documentElement","setAttribute","toggleTheme","prevTheme","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["/mnt/network_repo/test_ai_rpg/RPGer/client/src/context/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ntype ThemeType = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: ThemeType;\n  toggleTheme: () => void;\n  setTheme: (theme: ThemeType) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  // Check if user has a saved theme preference or use system preference\n  const getSavedTheme = (): ThemeType => {\n    const savedTheme = localStorage.getItem('theme') as ThemeType;\n    if (savedTheme) {\n      return savedTheme;\n    }\n    \n    // Check system preference\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    return prefersDark ? 'dark' : 'light';\n  };\n\n  const [theme, setTheme] = useState<ThemeType>(getSavedTheme);\n\n  // Update localStorage when theme changes\n  useEffect(() => {\n    localStorage.setItem('theme', theme);\n    document.documentElement.setAttribute('data-theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));\n  };\n\n  const value = {\n    theme,\n    toggleTheme,\n    setTheme,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUzF,MAAMC,YAAY,gBAAGN,aAAa,CAA+BO,SAAS,CAAC;AAM3E,OAAO,MAAMC,aAA2C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3E;EACA,MAAMC,aAAa,GAAGA,CAAA,KAAiB;IACrC,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAc;IAC7D,IAAIF,UAAU,EAAE;MACd,OAAOA,UAAU;IACnB;;IAEA;IACA,MAAMG,WAAW,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;IAC7E,OAAOH,WAAW,GAAG,MAAM,GAAG,OAAO;EACvC,CAAC;EAED,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAYS,aAAa,CAAC;;EAE5D;EACAR,SAAS,CAAC,MAAM;IACdU,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;IACpCG,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEL,KAAK,CAAC;EAC5D,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMM,WAAW,GAAGA,CAAA,KAAM;IACxBL,QAAQ,CAACM,SAAS,IAAKA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACnE,CAAC;EAED,MAAMC,KAAK,GAAG;IACZR,KAAK;IACLM,WAAW;IACXL;EACF,CAAC;EAED,oBACEf,OAAA,CAACC,YAAY,CAACsB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAlB,QAAA,EACjCA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACtB,EAAA,CApCWF,aAA2C;AAAAyB,EAAA,GAA3CzB,aAA2C;AAsCxD,OAAO,MAAM0B,QAAQ,GAAGA,CAAA,KAAwB;EAAAC,GAAA;EAC9C,MAAMC,OAAO,GAAGnC,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI8B,OAAO,KAAK7B,SAAS,EAAE;IACzB,MAAM,IAAI8B,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}