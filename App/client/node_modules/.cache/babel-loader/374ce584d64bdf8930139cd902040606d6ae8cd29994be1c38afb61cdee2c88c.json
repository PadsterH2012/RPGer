{"ast":null,"code":"/**\n * Widget type definitions for the RPGer dashboard\n */\n\n/**\n * Widget size constraints\n */\n\n/**\n * Widget metadata\n */\n\n/**\n * Widget category\n */\nexport let WidgetCategory = /*#__PURE__*/function (WidgetCategory) {\n  WidgetCategory[\"GAME\"] = \"game\";\n  WidgetCategory[\"CHARACTER\"] = \"character\";\n  WidgetCategory[\"UTILITY\"] = \"utility\";\n  WidgetCategory[\"SYSTEM\"] = \"system\";\n  WidgetCategory[\"CUSTOM\"] = \"custom\";\n  return WidgetCategory;\n}({});\n\n/**\n * Widget configuration options\n */\n\n/**\n * Widget props\n */\n\n/**\n * Widget component type\n */\n\n/**\n * Widget registration info\n */\n\n/**\n * Widget config component props\n */\n\n/**\n * Widget event types\n */\nexport let WidgetEventType = /*#__PURE__*/function (WidgetEventType) {\n  WidgetEventType[\"INIT\"] = \"init\";\n  WidgetEventType[\"UPDATE\"] = \"update\";\n  WidgetEventType[\"DESTROY\"] = \"destroy\";\n  WidgetEventType[\"CONFIG_CHANGE\"] = \"config_change\";\n  WidgetEventType[\"DATA_UPDATE\"] = \"data_update\";\n  return WidgetEventType;\n}({});\n\n/**\n * Widget event\n */\n\n/**\n * Widget event handler\n */\n\n/**\n * Widget lifecycle hooks\n */","map":{"version":3,"names":["WidgetCategory","WidgetEventType"],"sources":["/mnt/network_repo/test_ai_rpg/RPGer/client/src/types/widget.ts"],"sourcesContent":["/**\n * Widget type definitions for the RPGer dashboard\n */\n\nimport { ReactNode } from 'react';\n\n/**\n * Widget size constraints\n */\nexport interface WidgetSizeConstraints {\n  minW?: number;\n  minH?: number;\n  maxW?: number;\n  maxH?: number;\n}\n\n/**\n * Widget metadata\n */\nexport interface WidgetMetadata extends WidgetSizeConstraints {\n  id: string;\n  name: string;\n  description: string;\n  category: WidgetCategory;\n  icon?: string;\n  version: string;\n  author?: string;\n  defaultSize: {\n    w: number;\n    h: number;\n  };\n}\n\n/**\n * Widget category\n */\nexport enum WidgetCategory {\n  GAME = 'game',\n  CHARACTER = 'character',\n  UTILITY = 'utility',\n  SYSTEM = 'system',\n  CUSTOM = 'custom',\n}\n\n/**\n * Widget configuration options\n */\nexport interface WidgetConfig {\n  [key: string]: any;\n}\n\n/**\n * Widget props\n */\nexport interface WidgetProps {\n  id: string;\n  config?: WidgetConfig;\n  onConfigChange?: (config: WidgetConfig) => void;\n  isConfiguring?: boolean;\n  isEditing?: boolean;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\n/**\n * Widget component type\n */\nexport type WidgetComponent = React.FC<WidgetProps>;\n\n/**\n * Widget registration info\n */\nexport interface WidgetRegistration {\n  metadata: WidgetMetadata;\n  component: WidgetComponent;\n  configComponent?: React.FC<WidgetConfigProps>;\n}\n\n/**\n * Widget config component props\n */\nexport interface WidgetConfigProps {\n  config: WidgetConfig;\n  onChange: (config: WidgetConfig) => void;\n}\n\n/**\n * Widget event types\n */\nexport enum WidgetEventType {\n  INIT = 'init',\n  UPDATE = 'update',\n  DESTROY = 'destroy',\n  CONFIG_CHANGE = 'config_change',\n  DATA_UPDATE = 'data_update',\n}\n\n/**\n * Widget event\n */\nexport interface WidgetEvent {\n  type: WidgetEventType;\n  widgetId: string;\n  payload?: any;\n}\n\n/**\n * Widget event handler\n */\nexport type WidgetEventHandler = (event: WidgetEvent) => void;\n\n/**\n * Widget lifecycle hooks\n */\nexport interface WidgetLifecycleHooks {\n  onInit?: () => void | Promise<void>;\n  onUpdate?: () => void | Promise<void>;\n  onDestroy?: () => void | Promise<void>;\n  onConfigChange?: (config: WidgetConfig) => void | Promise<void>;\n  onDataUpdate?: (data: any) => void | Promise<void>;\n}\n"],"mappings":"AAAA;AACA;AACA;;AAIA;AACA;AACA;;AAQA;AACA;AACA;;AAeA;AACA;AACA;AACA,WAAYA,cAAc,0BAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAA,OAAdA,cAAc;AAAA;;AAQ1B;AACA;AACA;;AAKA;AACA;AACA;;AAWA;AACA;AACA;;AAGA;AACA;AACA;;AAOA;AACA;AACA;;AAMA;AACA;AACA;AACA,WAAYC,eAAe,0BAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAA,OAAfA,eAAe;AAAA;;AAQ3B;AACA;AACA;;AAOA;AACA;AACA;;AAGA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}