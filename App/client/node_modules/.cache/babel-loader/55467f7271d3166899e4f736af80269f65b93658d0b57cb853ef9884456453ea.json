{"ast":null,"code":"var _jsxFileName = \"/mnt/network_repo/test_ai_rpg/RPGer/client/src/components/widgets/ClockWidget.tsx\",\n  _s = $RefreshSig$();\n/**\n * ClockWidget Component\n * \n * Widget for displaying current time and date.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useTheme } from '../../context/ThemeContext';\nimport { WidgetCategory } from '../../types/widget';\nimport withWidget from './withWidget';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ClockContainer = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`;\n_c = ClockContainer;\nconst TimeDisplay = styled.div`\n  font-size: ${props => props.size};\n  font-weight: 700;\n  margin-bottom: var(--spacing-sm);\n  font-family: var(--font-family-mono, monospace);\n`;\n_c2 = TimeDisplay;\nconst DateDisplay = styled.div`\n  font-size: ${props => props.size};\n  color: var(--${props => props.theme}-text-secondary);\n`;\n_c3 = DateDisplay;\nconst SecondsDot = styled.span`\n  opacity: ${props => props.blinking ? props.theme === 'dark' ? 0.7 : 0.5 : 1};\n  transition: opacity 0.5s ease;\n`;\n_c4 = SecondsDot;\nconst defaultConfig = {\n  format: '24h',\n  showSeconds: true,\n  showDate: true,\n  blinkingSeparator: true,\n  timeSize: 'var(--font-size-xxl)',\n  dateSize: 'var(--font-size-md)'\n};\nconst ClockWidget = ({\n  config\n}) => {\n  _s();\n  const {\n    theme\n  } = useTheme();\n  const widgetConfig = {\n    ...defaultConfig,\n    ...config\n  };\n  const [time, setTime] = useState(new Date());\n  const [blinkState, setBlinkState] = useState(true);\n\n  // Update time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTime(new Date());\n      if (widgetConfig.blinkingSeparator) {\n        setBlinkState(prev => !prev);\n      }\n    }, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, [widgetConfig.blinkingSeparator]);\n\n  // Format time based on configuration\n  const formatTime = date => {\n    let hours = date.getHours();\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    const seconds = date.getSeconds().toString().padStart(2, '0');\n    let period = '';\n    if (widgetConfig.format === '12h') {\n      period = hours >= 12 ? ' PM' : ' AM';\n      hours = hours % 12;\n      hours = hours ? hours : 12; // Convert 0 to 12 for 12 AM\n    }\n    const separator = widgetConfig.blinkingSeparator ? /*#__PURE__*/_jsxDEV(SecondsDot, {\n      blinking: !blinkState,\n      theme: theme,\n      children: \":\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this) : ':';\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [hours.toString().padStart(2, '0'), separator, minutes, widgetConfig.showSeconds && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [separator, seconds]\n      }, void 0, true), period]\n    }, void 0, true);\n  };\n\n  // Format date\n  const formatDate = date => {\n    const options = {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n    return date.toLocaleDateString(undefined, options);\n  };\n  return /*#__PURE__*/_jsxDEV(ClockContainer, {\n    children: [/*#__PURE__*/_jsxDEV(TimeDisplay, {\n      size: widgetConfig.timeSize,\n      children: formatTime(time)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), widgetConfig.showDate && /*#__PURE__*/_jsxDEV(DateDisplay, {\n      size: widgetConfig.dateSize,\n      theme: theme,\n      children: formatDate(time)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(ClockWidget, \"bYHJ6ypMxqb22Djt8BlV0G2Iv4g=\", false, function () {\n  return [useTheme];\n});\n_c5 = ClockWidget;\nexport default _c6 = withWidget(ClockWidget, {\n  metadata: {\n    name: 'Clock',\n    description: 'Display current time and date',\n    category: WidgetCategory.UTILITY,\n    icon: 'ðŸ•’',\n    defaultSize: {\n      w: 4,\n      h: 2\n    },\n    minW: 2,\n    minH: 1\n  },\n  defaultConfig\n});\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"ClockContainer\");\n$RefreshReg$(_c2, \"TimeDisplay\");\n$RefreshReg$(_c3, \"DateDisplay\");\n$RefreshReg$(_c4, \"SecondsDot\");\n$RefreshReg$(_c5, \"ClockWidget\");\n$RefreshReg$(_c6, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","styled","useTheme","WidgetCategory","withWidget","jsxDEV","_jsxDEV","Fragment","_Fragment","ClockContainer","div","_c","TimeDisplay","props","size","_c2","DateDisplay","theme","_c3","SecondsDot","span","blinking","_c4","defaultConfig","format","showSeconds","showDate","blinkingSeparator","timeSize","dateSize","ClockWidget","config","_s","widgetConfig","time","setTime","Date","blinkState","setBlinkState","timer","setInterval","prev","clearInterval","formatTime","date","hours","getHours","minutes","getMinutes","toString","padStart","seconds","getSeconds","period","separator","children","fileName","_jsxFileName","lineNumber","columnNumber","formatDate","options","weekday","year","month","day","toLocaleDateString","undefined","_c5","_c6","metadata","name","description","category","UTILITY","icon","defaultSize","w","h","minW","minH","$RefreshReg$"],"sources":["/mnt/network_repo/test_ai_rpg/RPGer/client/src/components/widgets/ClockWidget.tsx"],"sourcesContent":["/**\n * ClockWidget Component\n * \n * Widget for displaying current time and date.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useTheme } from '../../context/ThemeContext';\nimport { WidgetProps, WidgetCategory } from '../../types/widget';\nimport withWidget from './withWidget';\n\nconst ClockContainer = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`;\n\nconst TimeDisplay = styled.div<{ size: string }>`\n  font-size: ${props => props.size};\n  font-weight: 700;\n  margin-bottom: var(--spacing-sm);\n  font-family: var(--font-family-mono, monospace);\n`;\n\nconst DateDisplay = styled.div<{ size: string }>`\n  font-size: ${props => props.size};\n  color: var(--${props => props.theme}-text-secondary);\n`;\n\nconst SecondsDot = styled.span<{ blinking: boolean }>`\n  opacity: ${props => props.blinking ? (props.theme === 'dark' ? 0.7 : 0.5) : 1};\n  transition: opacity 0.5s ease;\n`;\n\ninterface ClockWidgetConfig {\n  format: '12h' | '24h';\n  showSeconds: boolean;\n  showDate: boolean;\n  blinkingSeparator: boolean;\n  timeSize: string;\n  dateSize: string;\n  timezone?: string;\n}\n\nconst defaultConfig: ClockWidgetConfig = {\n  format: '24h',\n  showSeconds: true,\n  showDate: true,\n  blinkingSeparator: true,\n  timeSize: 'var(--font-size-xxl)',\n  dateSize: 'var(--font-size-md)',\n};\n\nconst ClockWidget: React.FC<WidgetProps> = ({ config }) => {\n  const { theme } = useTheme();\n  const widgetConfig = { ...defaultConfig, ...config } as ClockWidgetConfig;\n  \n  const [time, setTime] = useState<Date>(new Date());\n  const [blinkState, setBlinkState] = useState<boolean>(true);\n  \n  // Update time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTime(new Date());\n      \n      if (widgetConfig.blinkingSeparator) {\n        setBlinkState(prev => !prev);\n      }\n    }, 1000);\n    \n    return () => {\n      clearInterval(timer);\n    };\n  }, [widgetConfig.blinkingSeparator]);\n  \n  // Format time based on configuration\n  const formatTime = (date: Date): string => {\n    let hours = date.getHours();\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    const seconds = date.getSeconds().toString().padStart(2, '0');\n    let period = '';\n    \n    if (widgetConfig.format === '12h') {\n      period = hours >= 12 ? ' PM' : ' AM';\n      hours = hours % 12;\n      hours = hours ? hours : 12; // Convert 0 to 12 for 12 AM\n    }\n    \n    const separator = widgetConfig.blinkingSeparator \n      ? <SecondsDot blinking={!blinkState} theme={theme}>:</SecondsDot>\n      : ':';\n    \n    return (\n      <>\n        {hours.toString().padStart(2, '0')}{separator}{minutes}\n        {widgetConfig.showSeconds && <>{separator}{seconds}</>}\n        {period}\n      </>\n    );\n  };\n  \n  // Format date\n  const formatDate = (date: Date): string => {\n    const options: Intl.DateTimeFormatOptions = { \n      weekday: 'long', \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    };\n    \n    return date.toLocaleDateString(undefined, options);\n  };\n  \n  return (\n    <ClockContainer>\n      <TimeDisplay size={widgetConfig.timeSize}>\n        {formatTime(time)}\n      </TimeDisplay>\n      \n      {widgetConfig.showDate && (\n        <DateDisplay size={widgetConfig.dateSize} theme={theme}>\n          {formatDate(time)}\n        </DateDisplay>\n      )}\n    </ClockContainer>\n  );\n};\n\nexport default withWidget(ClockWidget, {\n  metadata: {\n    name: 'Clock',\n    description: 'Display current time and date',\n    category: WidgetCategory.UTILITY,\n    icon: 'ðŸ•’',\n    defaultSize: {\n      w: 4,\n      h: 2,\n    },\n    minW: 2,\n    minH: 1,\n  },\n  defaultConfig,\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}